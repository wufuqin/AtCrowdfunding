<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.atguigu.atcrowdfunding.manager.dao.UserMapper">

	<!-- 用户维护模块的mapper映射文件 -->

	<!-- 封装结果集 -->
	<resultMap id="BaseResultMap" type="com.atguigu.atcrowdfunding.bean.User">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="loginacct" property="loginacct" jdbcType="VARCHAR" />
		<result column="userpswd" property="userpswd" jdbcType="CHAR" />
		<result column="username" property="username" jdbcType="VARCHAR" />
		<result column="email" property="email" jdbcType="VARCHAR" />
		<result column="createtime" property="createtime" jdbcType="CHAR" />
	</resultMap>

	<!-- 根据id删除 -->
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete
		from t_user
		where id = #{id,jdbcType=INTEGER}
	</delete>

	<!--添加用户    useGeneratedKeys="true" keyProperty="id" : 主键回填，将得到的主键值回填到身体对象中返回前台-->
	<insert id="insert" parameterType="com.atguigu.atcrowdfunding.bean.User" useGeneratedKeys="true" keyProperty="id">
		insert
		into t_user (id,loginacct, userpswd,username, email, createtime)
		values
		(#{id,jdbcType=INTEGER},
		 #{loginacct,jdbcType=VARCHAR},
		 #{userpswd,jdbcType=CHAR},
		 #{username,jdbcType=VARCHAR},
		 #{email,jdbcType=VARCHAR},
		 #{createtime,jdbcType=CHAR})
	</insert>

	<!-- 根据id修改 -->
	<update id="updateByPrimaryKey" parameterType="com.atguigu.atcrowdfunding.bean.User">
		update t_user
		set
			loginacct = #{loginacct,jdbcType=VARCHAR},
			username = #{username,jdbcType=VARCHAR},
			email = #{email,jdbcType=VARCHAR}
		where id = #{id,jdbcType=INTEGER}
	</update>

	<!-- 根据id查询 -->
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select id, loginacct, userpswd, username, email, createtime
		from t_user
		where id = #{id,jdbcType=INTEGER}
	</select>

	<!-- 查询所有 -->
	<select id="selectAll" resultMap="BaseResultMap">
		select id, loginacct, userpswd, username, email, createtime
		from t_user
	</select>

	<!-- 查询用户数据，用于登录校验 -->
	<select id="queryUserLogin" parameterType="map" resultMap="BaseResultMap">
		select id, loginacct, userpswd, username, email, createtime
		from t_user
		where loginacct=#{loginacct} and userpswd=#{userpswd}
	</select>

	<!-- 查询分页数据 -->
	<select id="queryList" resultMap="BaseResultMap">
		select id, loginacct, userpswd, username, email, createtime
		from t_user
		order by createtime desc
		limit #{startIndex},#{pagesize}
	</select>

	<!-- 查询总的记录条数 -->
	<select id="queryCount"  resultType="int">
		select count(*)
		from t_user
	</select>

	<!--查询分页数据,避免sql注入采用 concat进行拼串-->
	<select id="queryListLike" resultMap="BaseResultMap">
		select id, loginacct, userpswd, username, email, createtime
		from t_user
		<where>
			<!--<if test="queryText != null">loginacct like '%${queryText}%'</if>-->
			<if test="queryText != null">loginacct like concat("%",#{queryText},"%")</if>
		</where>
		order by createtime desc
		limit #{startIndex},#{pagesize}
	</select>

	<!-- 查询总的记录条数 -->
	<select id="queryCountLike"  resultType="int">
		select count(*)
		from t_user
		<where>
			<!--<if test="queryText != null">loginacct like '%${queryText}%'</if>-->
			<if test="queryText != null">loginacct like concat("%",#{queryText},"%")</if>
		</where>
	</select>

	<!--查询所有的角色-->
	<select id="queryAllRole" resultType="role">
		select id,name
		from t_role
	</select>

	<!--根据用户id查询用户拥有的角色的id-->
	<select id="queryRoleByUserId" parameterType="int" resultType="int">
		select roleid
		from t_user_role
		where userid=#{id}
	</select>

	<!--分配角色-->
	<insert id="addAssignRole">
		<foreach collection="data.ids" item="roleid" separator=";">
			insert
			into t_user_role(userid,roleid)
			values(#{userid},#{roleid})
		</foreach>
	</insert>

	<!--取消权限-->
	<delete id="deleteAssignRole">
		delete
		from t_user_role
		where userid = #{userid} and roleid in
		<foreach collection="data.ids" item="roleid" open="(" separator="," close=")">
			#{roleid}
		</foreach>
	</delete>

	<!--查询用户拥有的权限对应的id-->
	<select id="queryPermissionByUserId" parameterType="int" resultType="Permission">
		select distinct t_permission.id, t_permission.pid, t_permission.name,t_permission.icon,t_permission.url
		from t_permission,t_role_permission,t_role,t_user_role,t_user
		where
			t_permission.id = t_role_permission.permissionid
			and t_role_permission.`roleid` = t_role.id
			and t_role.`id`=t_user_role.`roleid`
			and t_user_role.`userid` = t_user.`id`
			and t_user.id=#{userid}
		order by t_permission.id
	</select>

</mapper>



















